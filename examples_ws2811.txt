*** rotate through every hue
8
(
    0(1(
            (0,2(6,7))
    ))
    6(4(
        (0,1(9))(0,1(0))(0,1(240))(0,1(1))
    ))
    5(6(
            (0,1(6))
            (0,1(0))
            (0,1(5000))
            (0,1(252))
            (0,1(0))
            (0,1(5000))
    ))
    6(4(
        (0,1(1))(128,1,0)(128,2,0)(0,1(0))
    ))
    6(4(
        (0,1(5))(128,3,0)(0,1(252))(0,1(0))
    ))
    7(4(
        (128,4,0)(0,1(255))(0,1(255))(0,1(255))
    ))
    3
    (
        9
        (
            (128,1,0)
            (0,1(0))
            (128,1,0)
            (0,1(1))
            (129,5,0)
            (0,1(1))
            (0,1(0))
            (0,1(0))
            (0,1(0))
        )
    )
    1
    (
        0
        (
        )
    )
)

8(0(1((0,2(6,7))))6(4((0,1(9))(0,1(0))(0,1(240))(0,1(1))))5(6((0,1(6))(0,1(0))(0,1(5000))(0,1(252))(
0,1(0))(0,1(5000))))6(4((0,1(1))(128,1,0)(128,2,0)(0,1(0))))6(4((0,1(5))(128,3,0)(0,1(252))(0,1(0))
))7(4((128,4,0)(0,1(255))(0,1(255))(0,1(255))))3(9((128,1,0)(0,1(0))(128,1,0)(0,1(1))(129,5,0)(0,1(1
))(0,1(0))(0,1(0))(0,1(0))))1(0()))


*** 6 bouncing rings ***
9
(
// 0: root - execute nodes a, b, c...
    0(1(
            (0,2(5,6))
    ))
// 1: Math - Splay(a,b,c) output array of B values starting with a step c
    6(4(
        (0,1(9))(0,1(1000))(0,1(6))(0,1(1500))
    ))
// 2: Math - Splay(a,b,c) output array of B values starting with a step c
    6(4(
        (0,1(9))(0,1(0))(0,1(6))(0,1(42))
    ))
// 3: Signal - A_Sawtooth (waveform, frequency, amplitude, phase)
    5(6(
            (0,1(107))
            (0,1(0))
            (128,1,0)
            (0,1(239))
            (0,1(0))
            (0,1(5000))
    ))
// 4: Color - h, s, v, a
  7(4(
    (128,2,0)(0,1(255))(128,8,0)(0,1(255))
  ))    
// 5: Line - x1, y1, x2, y2, color, width, style, display, layer
    3(9(
            (128,3,0)
            (0,1(0))
            (128,3,0)
            (0,1(1))
            (129,4,0)
            (0,1(1))
            (0,1(0))
            (0,1(0))
            (0,1(0))
    ))
// 6: Display
    1(0())
// 7: Signal - A_Pulse (waveform, frequency, amplitude, phase)
    5(6(
            (0,1(110))
            (0,1(0))
            (0,1(1000))
            (0,1(127))
            (0,1(0))
            (0,1(0))
    ))
// 8: Math - add(a,b)
    6(4(
        (0,1(1))(128,7,0)(0,1(64))(0,1(0))
    ))
)

*** 6 bouncing rings ***
9(0(1((0,2(5,6))))6(4((0,1(9))(0,1(1000))(0,1(6))(0,1(1500))))6(4((0,1(9))(0,1(0))(0,1(6))(0,1(42))))
5(6((0,1(107))(0,1(0))(128,1,0)(0,1(239))(0,1(0))(0,1(5000))))7(4((128,2,0)(0,1(255))(128,7,0)(0,1(255))
))3(9((128,3,0)(0,1(0))(128,3,0)(0,1(1))(129,4,0)(0,1(1))(0,1(0))(0,1(0))(0,1(0))))1(0())5(6((0,1(11
0))(0,1(0))(0,1(1000))(0,1(255))(0,1(0))(0,1(0))))6(4((0,1(1))(128,7,0)(0,1(64))(0,1(0)))))

*** 6 bouncing rings ***
9(0(1((0,2(5,6))))6(4((0,1(9))(0,1(2000))(0,1(6))(0,1(3000))))6(4((0,1(9))(0,1(0))(0,1(6))(0,1(42))))
5(6((0,1(107))(0,1(0))(128,1,0)(0,1(239))(0,1(0))(0,1(5000))))7(4((128,2,0)(0,1(255))(128,8,0)(0,1(255))
))2(6((128,3,0)(0,2(0,1))(129,4,0)(0,1(0))(0,1(0))(0,1(0))))1(0())5(6((0,1(11
0))(0,1(0))(0,1(1000))(0,1(127))(0,1(0))(0,1(0))))6(4((0,1(1))(128,7,0)(0,1(64))(0,1(0)))))


off
2(0(1((0,1(1))))1(0())))

